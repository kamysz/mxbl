http {
    gzip on;
    gzip_static on;
    gzip_proxied any;
    gzip_types application/json;

    proxy_read_timeout 15m;
    proxy_http_version 1.1;

    # Provide some extra information to the Mendix Runtime about the
    # end user connection
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;

    # This is an important one, make sure to hint the mendix runtime
    # whether https is used to the end user, so the secure flag on
    # session cookies gets set (Mendix >= 3.3.3, 4.2.2)
    proxy_set_header X-Forwarded-Scheme $scheme;

    # Restrict usage of IFrames
    add_header X-Frame-Options SAMEORIGIN;
    # Tell the browser to always use https
    add_header Strict-Transport-Security "max-age=31536000;";

    # Random bots scanning the internet end up here
    # Also see the section about the catch-all server declaration below
    server {
        listen [::]:443 default_server ipv6only=on ssl;
        listen 0.0.0.0:443 default_server ssl;
        server_name _;
        ssl_certificate /etc/ssl/nginx/dummy.crt;
        ssl_certificate_key /etc/ssl/nginx/dummy.key;
        return 503;
    }

    upstream ${APP_NAME} {
        server 127.0.0.1:8000;
        keepalive 8;
    }

    server {
        listen [::]:443 ssl;
        listen 0.0.0.0:443 ssl;

        ssl_certificate ${MENDIX_DIR}/certs/self_signed.crt;
        ssl_certificate_key ${MENDIX_DIR}/certs/self_signed.key;

        root ${APP_DIR}/web/;

        location / {
            # Instruct the browser to never cache the first login page, since
            # it would prevent us from seeing updates after a change
            if ($request_uri ~ ^/((index[\w-]*|login)\.html)?$) {
                add_header Cache-Control "no-cache";
                add_header X-Frame-Options "SAMEORIGIN";
            }
            # Agressively cache these files, since they use a cache bust
            if ($request_uri ~ ^/(.*\.(css|js)|(css|img|js|lib|mxclientsystem|pages|widgets)/.*)\?[0-9]+$) {
                expires 1y;
            }
            # By default first look if the requests points to static content.
            # If not, proxy it to the runtime process.
            try_files $uri $uri/ @runtime;
        }
        location @runtime {
            proxy_pass http://${APP_NAME};
            allow all;
        }
        location = /file {
            proxy_pass http://${APP_NAME};
            # Be generous about the size of things that can be uploaded
            client_max_body_size 1G;
            # Never buffer uploads or downloads, directly stream them
            proxy_buffering off;
            proxy_request_buffering off;
        }
        location = /xas/ {
            proxy_pass http://${APP_NAME};
        }
        # Never expose the -doc paths on a public application instance
        location ~ ^/\w+-doc/ {
            deny all;
        }
    }
}
